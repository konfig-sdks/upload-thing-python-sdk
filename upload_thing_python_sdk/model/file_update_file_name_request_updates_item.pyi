# coding: utf-8

"""
    UploadThing REST API

    UploadThing is the easiest way to add file uploads to your full stack TypeScript application. Many services have tried to build a \"better S3\", but in our opinion, none found the right compromise of ownership, flexibility and safety.

    The version of the OpenAPI document: 6.4.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from upload_thing_python_sdk import schemas  # noqa: F401


class FileUpdateFileNameRequestUpdatesItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "newName",
        }
        
        class properties:
            newName = schemas.StrSchema
            fileKey = schemas.StrSchema
            customId = schemas.StrSchema
            __annotations__ = {
                "newName": newName,
                "fileKey": fileKey,
                "customId": customId,
            }
    
    newName: MetaOapg.properties.newName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newName"]) -> MetaOapg.properties.newName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileKey"]) -> MetaOapg.properties.fileKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customId"]) -> MetaOapg.properties.customId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["newName", "fileKey", "customId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newName"]) -> MetaOapg.properties.newName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileKey"]) -> typing.Union[MetaOapg.properties.fileKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customId"]) -> typing.Union[MetaOapg.properties.customId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["newName", "fileKey", "customId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        newName: typing.Union[MetaOapg.properties.newName, str, ],
        fileKey: typing.Union[MetaOapg.properties.fileKey, str, schemas.Unset] = schemas.unset,
        customId: typing.Union[MetaOapg.properties.customId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FileUpdateFileNameRequestUpdatesItem':
        return super().__new__(
            cls,
            *args,
            newName=newName,
            fileKey=fileKey,
            customId=customId,
            _configuration=_configuration,
            **kwargs,
        )
