# coding: utf-8

"""
    UploadThing REST API

    UploadThing is the easiest way to add file uploads to your full stack TypeScript application. Many services have tried to build a \"better S3\", but in our opinion, none found the right compromise of ownership, flexibility and safety.

    The version of the OpenAPI document: 6.4.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from upload_thing_python_sdk import schemas  # noqa: F401


class UploadRequestPresignedUrlsRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "routeConfig",
            "files",
            "callbackUrl",
            "callbackSlug",
        }
        
        class properties:
            callbackUrl = schemas.StrSchema
            callbackSlug = schemas.StrSchema
        
            @staticmethod
            def files() -> typing.Type['UploadRequestPresignedUrlsRequestFiles']:
                return UploadRequestPresignedUrlsRequestFiles
        
            @staticmethod
            def routeConfig() -> typing.Type['RouteConfig']:
                return RouteConfig
            metadata = schemas.AnyTypeSchema
            __annotations__ = {
                "callbackUrl": callbackUrl,
                "callbackSlug": callbackSlug,
                "files": files,
                "routeConfig": routeConfig,
                "metadata": metadata,
            }
    
    routeConfig: 'RouteConfig'
    files: 'UploadRequestPresignedUrlsRequestFiles'
    callbackUrl: MetaOapg.properties.callbackUrl
    callbackSlug: MetaOapg.properties.callbackSlug
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callbackUrl"]) -> MetaOapg.properties.callbackUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callbackSlug"]) -> MetaOapg.properties.callbackSlug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["files"]) -> 'UploadRequestPresignedUrlsRequestFiles': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routeConfig"]) -> 'RouteConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["callbackUrl", "callbackSlug", "files", "routeConfig", "metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callbackUrl"]) -> MetaOapg.properties.callbackUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callbackSlug"]) -> MetaOapg.properties.callbackSlug: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["files"]) -> 'UploadRequestPresignedUrlsRequestFiles': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routeConfig"]) -> 'RouteConfig': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["callbackUrl", "callbackSlug", "files", "routeConfig", "metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        routeConfig: 'RouteConfig',
        files: 'UploadRequestPresignedUrlsRequestFiles',
        callbackUrl: typing.Union[MetaOapg.properties.callbackUrl, str, ],
        callbackSlug: typing.Union[MetaOapg.properties.callbackSlug, str, ],
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UploadRequestPresignedUrlsRequest':
        return super().__new__(
            cls,
            *args,
            routeConfig=routeConfig,
            files=files,
            callbackUrl=callbackUrl,
            callbackSlug=callbackSlug,
            metadata=metadata,
            _configuration=_configuration,
            **kwargs,
        )

from upload_thing_python_sdk.model.route_config import RouteConfig
from upload_thing_python_sdk.model.upload_request_presigned_urls_request_files import UploadRequestPresignedUrlsRequestFiles
