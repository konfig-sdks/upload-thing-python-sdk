# coding: utf-8

"""
    UploadThing REST API

    UploadThing is the easiest way to add file uploads to your full stack TypeScript application. Many services have tried to build a \"better S3\", but in our opinion, none found the right compromise of ownership, flexibility and safety.

    The version of the OpenAPI document: 6.4.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from upload_thing_python_sdk import schemas  # noqa: F401


class UsageInfoGetUsageInfoResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "filesUploaded",
            "appTotalBytes",
            "limitBytes",
            "totalBytes",
        }
        
        class properties:
            totalBytes = schemas.NumberSchema
            appTotalBytes = schemas.NumberSchema
            filesUploaded = schemas.NumberSchema
            limitBytes = schemas.NumberSchema
            __annotations__ = {
                "totalBytes": totalBytes,
                "appTotalBytes": appTotalBytes,
                "filesUploaded": filesUploaded,
                "limitBytes": limitBytes,
            }
    
    filesUploaded: MetaOapg.properties.filesUploaded
    appTotalBytes: MetaOapg.properties.appTotalBytes
    limitBytes: MetaOapg.properties.limitBytes
    totalBytes: MetaOapg.properties.totalBytes
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalBytes"]) -> MetaOapg.properties.totalBytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appTotalBytes"]) -> MetaOapg.properties.appTotalBytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filesUploaded"]) -> MetaOapg.properties.filesUploaded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limitBytes"]) -> MetaOapg.properties.limitBytes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["totalBytes", "appTotalBytes", "filesUploaded", "limitBytes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalBytes"]) -> MetaOapg.properties.totalBytes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appTotalBytes"]) -> MetaOapg.properties.appTotalBytes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filesUploaded"]) -> MetaOapg.properties.filesUploaded: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limitBytes"]) -> MetaOapg.properties.limitBytes: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["totalBytes", "appTotalBytes", "filesUploaded", "limitBytes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        filesUploaded: typing.Union[MetaOapg.properties.filesUploaded, decimal.Decimal, int, float, ],
        appTotalBytes: typing.Union[MetaOapg.properties.appTotalBytes, decimal.Decimal, int, float, ],
        limitBytes: typing.Union[MetaOapg.properties.limitBytes, decimal.Decimal, int, float, ],
        totalBytes: typing.Union[MetaOapg.properties.totalBytes, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsageInfoGetUsageInfoResponse':
        return super().__new__(
            cls,
            *args,
            filesUploaded=filesUploaded,
            appTotalBytes=appTotalBytes,
            limitBytes=limitBytes,
            totalBytes=totalBytes,
            _configuration=_configuration,
            **kwargs,
        )
